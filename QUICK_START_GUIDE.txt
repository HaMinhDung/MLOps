# üöÄ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG IRIS ML API - QUICK START GUIDE

## üìã T·ªîNG QUAN
H·ªá th·ªëng ML API cho ph√¢n lo·∫°i hoa Iris v·ªõi 2 models (Random Forest + SVM), MLflow tracking, v√† Docker deployment.

---

## ‚ö° QUICK START - 3 B∆Ø·ªöC

### 1. Kh·ªüi ƒë·ªông h·ªá th·ªëng
```bash
docker-compose up -d
```

### 2. Ki·ªÉm tra health
```bash
curl http://localhost:8000/
```

### 3. Test v·ªõi Postman ho·∫∑c Python
```bash
python tests/test_api.py
```

**Th·ªùi gian kh·ªüi ƒë·ªông: ~2 ph√∫t**

---

## üîÑ T·∫ÆT/B·∫¨T D·ª∞ √ÅN

### T·∫Øt d·ª± √°n
```bash
docker-compose down
```

### B·∫≠t l·∫°i d·ª± √°n

#### C√°ch 1: Quick Start (Khuy·∫øn ngh·ªã)
```bash
# Ch·ªâ 1 l·ªánh - everything auto start
docker-compose up -d

# Ch·ªù containers kh·ªüi ƒë·ªông
timeout 30

# Ki·ªÉm tra
docker ps
curl http://localhost:8000/
```

#### C√°ch 2: Step by Step
```bash
# B∆∞·ªõc 1: Train models (n·∫øu ch∆∞a c√≥ .pkl files)
python src/train_models_mlflow.py

# B∆∞·ªõc 2: Start containers
docker-compose up -d

# B∆∞·ªõc 3: Verify
docker ps
curl http://localhost:8000/
curl http://localhost:5000/
```

---

## üìÆ H∆Ø·ªöNG D·∫™N TEST POSTMAN CHI TI·∫æT

### Setup Postman

#### B∆∞·ªõc 1: Import Collection
1. M·ªü Postman Desktop/Web
2. Click **"Import"** button
3. Ch·ªçn file: `Iris_API.postman_collection.json`
4. Collection xu·∫•t hi·ªán v·ªõi 5 requests

#### B∆∞·ªõc 2: Setup Environment
1. Click **"Environments"** ‚Üí **"Create Environment"**
2. Name: `Iris Local API`
3. Add variable:
   - **Variable:** `BASE_URL`
   - **Initial Value:** `http://localhost:8000`
   - **Current Value:** `http://localhost:8000`
4. **Save** environment
5. **Select** environment ·ªü dropdown g√≥c ph·∫£i

### Test Sequence - 5 Requests

#### Test 1: Health Check ‚úÖ
```
Method: GET
URL: {{BASE_URL}}/
Headers: Kh√¥ng c·∫ßn

Expected Response:
{
  "status": "healthy",
  "models_loaded": ["random_forest", "svm"]
}
```

#### Test 2: Models Info ‚úÖ
```
Method: GET
URL: {{BASE_URL}}/models/info
Headers: Kh√¥ng c·∫ßn

Expected Response:
{
  "available_models": ["random_forest", "svm"],
  "class_names": ["setosa", "versicolor", "virginica"],
  "features": ["sepal_length", "sepal_width", "petal_length", "petal_width"],
  "scaler_loaded": true
}
```

#### Test 3: Random Forest Prediction ‚úÖ
```
Method: POST
URL: {{BASE_URL}}/predict/random_forest
Headers: Content-Type: application/json

Body (raw/JSON):
{
  "sepal_length": 5.1,
  "sepal_width": 3.5,
  "petal_length": 1.4,
  "petal_width": 0.2
}

Expected Response:
{
  "model_name": "Random Forest",
  "predicted_class": "setosa",
  "predicted_class_id": 0,
  "confidence": 1.0,
  "probabilities": {
    "setosa": 1.0,
    "versicolor": 0.0,
    "virginica": 0.0
  }
}
```

#### Test 4: SVM Prediction ‚úÖ
```
Method: POST
URL: {{BASE_URL}}/predict/svm
Headers: Content-Type: application/json

Body (raw/JSON):
{
  "sepal_length": 6.3,
  "sepal_width": 3.3,
  "petal_length": 6.0,
  "petal_width": 2.5
}

Expected Response:
{
  "model_name": "SVM",
  "predicted_class": "virginica",
  "predicted_class_id": 2,
  "confidence": 0.98,
  "probabilities": {
    "setosa": 0.01,
    "versicolor": 0.01,
    "virginica": 0.98
  }
}
```

#### Test 5: Both Models Prediction ‚úÖ
```
Method: POST
URL: {{BASE_URL}}/predict/both
Headers: Content-Type: application/json

Body (raw/JSON):
{
  "sepal_length": 5.9,
  "sepal_width": 3.0,
  "petal_length": 5.1,
  "petal_width": 1.8
}

Expected Response:
[
  {
    "model_name": "Random Forest",
    "predicted_class": "virginica",
    "predicted_class_id": 2,
    "confidence": 0.95,
    "probabilities": {...}
  },
  {
    "model_name": "SVM", 
    "predicted_class": "virginica",
    "predicted_class_id": 2,
    "confidence": 0.92,
    "probabilities": {...}
  }
]
```

---

## üåê ALTERNATIVE TESTING METHODS

### 1. Swagger UI (Browser)
```
URL: http://localhost:8000/docs
- Click "Try it out" tr√™n m·ªói endpoint
- Nh·∫≠p data v√† click "Execute"
- Xem response ngay tr√™n giao di·ªán
```

### 2. Python Test Script
```bash
python tests/test_api.py
```

### 3. cURL Commands
```bash
# Health check
curl http://localhost:8000/

# Models info
curl http://localhost:8000/models/info

# Prediction
curl -X POST http://localhost:8000/predict/random_forest \
  -H "Content-Type: application/json" \
  -d '{"sepal_length":5.1,"sepal_width":3.5,"petal_length":1.4,"petal_width":0.2}'
```

---

## üìä ACCESSING UIs

### API Documentation (Swagger)
```
URL: http://localhost:8000/docs
- Interactive API documentation
- Test endpoints directly
- View request/response schemas
```

### MLflow UI
```
URL: http://localhost:5000
- View experiment tracking
- Compare model performance
- Explore model artifacts
- Model registry management
```

---

## üîß TROUBLESHOOTING

### Containers kh√¥ng start
```bash
# Check logs
docker-compose logs

# Rebuild containers
docker-compose down
docker-compose build --no-cache
docker-compose up -d
```

### API kh√¥ng response
```bash
# Ch·ªù l√¢u h∆°n (containers c·∫ßn time)
timeout 60

# Check API container logs
docker logs ml_demo-iris-api-1

# Check container status
docker ps
```

### Models not found error
```bash
# Retrain models
python src/train_models_mlflow.py

# Restart containers
docker-compose restart iris-api
```

### Port already in use
```bash
# Check what's using port 8000
netstat -ano | findstr :8000

# Kill process or change port trong docker-compose.yml
```

### Postman collection kh√¥ng import ƒë∆∞·ª£c
```bash
# Check file exists
ls Iris_API.postman_collection.json

# Try import by URL: file://path/to/collection.json
```

---

## üì± QUICK COMMANDS REFERENCE

```bash
# Start everything
docker-compose up -d

# Stop everything  
docker-compose down

# Check status
docker ps

# View logs
docker-compose logs -f

# Health check
curl http://localhost:8000/

# Full test
python tests/test_api.py

# Retrain models
python src/train_models_mlflow.py

# Restart specific service
docker-compose restart iris-api
```

---

## üéØ POSTMAN TESTING CHECKLIST

- [ ] Import collection th√†nh c√¥ng
- [ ] Setup environment v·ªõi BASE_URL
- [ ] Test 1: Health Check - Status 200
- [ ] Test 2: Models Info - C√≥ available_models
- [ ] Test 3: Random Forest - Prediction tr·∫£ v·ªÅ
- [ ] Test 4: SVM - Prediction tr·∫£ v·ªÅ  
- [ ] Test 5: Both Models - Array v·ªõi 2 results

**N·∫øu t·∫•t c·∫£ pass ‚Üí H·ªá th·ªëng ho·∫°t ƒë·ªông perfect! ‚úÖ**

---

## üöÄ TIPS & BEST PRACTICES

### Development Workflow
1. **Start containers:** `docker-compose up -d`
2. **Wait 30s** cho services kh·ªüi ƒë·ªông
3. **Test health:** `curl http://localhost:8000/`
4. **Run full tests:** `python tests/test_api.py`
5. **Use Postman** cho interactive testing

### Monitoring
- **API Health:** http://localhost:8000/
- **MLflow Dashboard:** http://localhost:5000
- **Container Status:** `docker ps`
- **Logs:** `docker-compose logs -f`

### Performance
- **Response time:** < 100ms typical
- **Startup time:** ~30-60 seconds
- **Memory usage:** ~500MB total
- **CPU usage:** Low khi idle

---

**üéØ SUCCESS CRITERIA: T·∫•t c·∫£ 5 Postman tests pass = H·ªá th·ªëng ready to use!**
